<% if (typeof user !== 'undefined' && user) { %>
  <script>window.CURRENT_USER_ID = <%= user.id %>;</script>
<% } else { %>
  <script>window.CURRENT_USER_ID = null;</script>
<% } %>
<!-- Chat Container -->
<div class="chat-container">
    <div class="chat-header">
        <h3>Movie Chat</h3>
        <div class="online-users">
            <span class="online-dot"></span>
            <span id="online-count">0</span> online
        </div>
    </div>
    
    <div class="chat-messages" id="chat-messages">
        <!-- Messages will be loaded here -->
    </div>

    <div class="chat-input-container position-relative">
        <div class="emoji-picker" id="emoji-picker" style="display: none;">
            <span class="emoji" onclick="insertEmoji('üòÄ')">üòÄ</span>
            <span class="emoji" onclick="insertEmoji('üòÇ')">üòÇ</span>
            <span class="emoji" onclick="insertEmoji('üòç')">üòç</span>
            <span class="emoji" onclick="insertEmoji('üòé')">üòé</span>
            <span class="emoji" onclick="insertEmoji('üëç')">üëç</span>
            <span class="emoji" onclick="insertEmoji('üé¨')">üé¨</span>
            <span class="emoji" onclick="insertEmoji('üçø')">üçø</span>
            <span class="emoji" onclick="insertEmoji('üò≠')">üò≠</span>
            <span class="emoji" onclick="insertEmoji('üî•')">üî•</span>
            <span class="emoji" onclick="insertEmoji('ü•≥')">ü•≥</span>
        </div>
        
        <div class="input-actions">
            <button class="btn btn-sm" type="button" onclick="toggleEmojiPicker()">
                <i class="fas fa-smile"></i>
            </button>
            <button class="btn btn-sm" type="button" onclick="shareMovie()">
                <i class="fas fa-film"></i>
            </button>
        </div>

        <form id="chat-form" class="chat-form">
            <input type="text" id="message-input" placeholder="Type your message..." required autocomplete="off">
            <button type="submit">
                <i class="fas fa-paper-plane"></i>
            </button>
        </form>
    </div>
</div>

<style>
.chat-container {
    background: #fff;
    border-radius: 10px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    height: 600px;
    display: flex;
    flex-direction: column;
    margin: 20px 0;
}

.chat-header {
    padding: 15px;
    border-bottom: 1px solid #eee;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.online-users {
    display: flex;
    align-items: center;
    gap: 5px;
}

.online-dot {
    width: 8px;
    height: 8px;
    background: #4CAF50;
    border-radius: 50%;
}

.chat-messages {
    flex: 1;
    overflow-y: auto;
    padding: 15px;
}

.message {
    margin-bottom: 15px;
    display: flex;
    gap: 10px;
}

.message-content {
    background: #f0f2f5;
    padding: 10px 15px;
    border-radius: 15px;
    max-width: 70%;
}

.message-content.movie-share {
    background: #e3f2fd;
}

.message-header {
    display: flex;
    align-items: center;
    gap: 8px;
    margin-bottom: 5px;
}

.message-header img {
    width: 30px;
    height: 30px;
    border-radius: 50%;
}

.message-time {
    font-size: 0.8em;
    color: #666;
}

.message-reactions {
    display: flex;
    gap: 5px;
    margin-top: 5px;
}

.reaction {
    background: #fff;
    border: 1px solid #ddd;
    border-radius: 15px;
    padding: 2px 8px;
    font-size: 0.8em;
    cursor: pointer;
}

.chat-input-container {
    padding: 15px;
    border-top: 1px solid #eee;
}

.input-actions {
    display: flex;
    gap: 10px;
    margin-bottom: 10px;
}

.chat-form {
    display: flex;
    gap: 10px;
}

.chat-form input {
    flex: 1;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 20px;
    outline: none;
}

.chat-form button {
    background: #007bff;
    color: white;
    border: none;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    cursor: pointer;
}

.emoji-picker {
    position: absolute;
    bottom: 100%;
    right: 0;
    background: white;
    border: 1px solid #ddd;
    border-radius: 5px;
    padding: 10px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

.emoji-picker .emoji {
    font-size: 1.5em;
    cursor: pointer;
    margin: 2px;
    transition: transform 0.1s;
}
.emoji-picker .emoji:hover {
    transform: scale(1.2);
}
</style>

<script src="/socket.io/socket.io.js"></script>
<script>
const socket = io({
    auth: { userId: window.CURRENT_USER_ID }
});
const chatMessages = document.getElementById('chat-messages');
const chatForm = document.getElementById('chat-form');
const messageInput = document.getElementById('message-input');
const onlineCount = document.getElementById('online-count');

// Load initial messages
fetch('/chat/messages')
    .then(res => res.json())
    .then(messages => {
        messages.forEach(message => displayMessage(message));
    });

// Handle new messages
socket.on('chat message', (message) => {
    displayMessage(message);
});

// Handle online users count
socket.on('online users', (count) => {
    onlineCount.textContent = count;
});

// Send message
chatForm.addEventListener('submit', (e) => {
    e.preventDefault();
    const message = messageInput.value.trim();
    if (message) {
        socket.emit('chat message', {
            content: message,
            type: 'text'
        });
        messageInput.value = '';
    }
});

// Display message
function displayMessage(message) {
    const messageDiv = document.createElement('div');
    messageDiv.className = 'message';
    
    const content = `
        <div class="message-content ${message.message_type}">
            <div class="message-header">
                <img src="${message.profile_picture || '/images/default-avatar.png'}" alt="${message.username}">
                <span class="username">${message.username}</span>
                <span class="message-time">${new Date(message.created_at).toLocaleTimeString()}</span>
            </div>
            <div class="message-text">${message.content}</div>
            ${message.movie_title ? `
                <div class="movie-share">
                    <i class="fas fa-film"></i> Shared movie: ${message.movie_title}
                </div>
            ` : ''}
            <div class="message-reactions" id="reactions-${message.message_id}"></div>
        </div>
    `;
    
    messageDiv.innerHTML = content;
    chatMessages.appendChild(messageDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;
    
    // Load reactions
    loadReactions(message.message_id);
}

// Load reactions for a message
function loadReactions(messageId) {
    fetch(`/chat/messages/${messageId}/reactions`)
        .then(res => res.json())
        .then(reactions => {
            const reactionsDiv = document.getElementById(`reactions-${messageId}`);
            reactionsDiv.innerHTML = reactions.map(reaction => `
                <span class="reaction" onclick="addReaction(${messageId}, '${reaction.emoji}')">
                    ${reaction.emoji}
                </span>
            `).join('');
        });
}

// Add reaction to message
function addReaction(messageId, emoji) {
    fetch(`/chat/messages/${messageId}/reactions`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ emoji })
    })
    .then(() => loadReactions(messageId));
}

// Toggle emoji picker
function toggleEmojiPicker() {
    const picker = document.getElementById('emoji-picker');
    picker.style.display = picker.style.display === 'none' ? 'block' : 'none';
}

// Insert emoji into message input
function insertEmoji(emoji) {
    messageInput.value += emoji;
    messageInput.focus();
}

// Share movie
function shareMovie() {
    // Implement movie sharing functionality
    // This could open a modal with a list of movies to share
}
</script> 